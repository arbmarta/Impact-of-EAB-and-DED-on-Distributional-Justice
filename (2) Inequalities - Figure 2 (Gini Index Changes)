import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

cities = ["Calgary", "Edmonton", "Lethbridge", "Regina", "Winnipeg"]

# Tree Count Data
tree_count = {
    'City': ['Calgary', 'Edmonton', 'Lethbridge', 'Regina', 'Winnipeg'],
    'Current Inequality': [0.379, 0.412, 0.415, 0.292, 0.282],
    'Following Loss of Ash': [0.396, 0.431, 0.376, 0.365, 0.356],
    'Following Loss of Susceptible Elm': [0.427, 0.362, 0.365, 0.224, 0.273],
    'Following Loss of All Elm': [0.426, 0.362, 0.364, 0.221, 0.276]
}

tree_count_df = pd.DataFrame(tree_count)

# Basal Area Data
basal_area = {
    'City': ['Calgary', 'Edmonton', 'Lethbridge', 'Regina', 'Winnipeg'],
    'Current Inequality': [0.614, 0.710, 0.696, 0.484, 0.482],
    'Following Loss of Ash': [0.614, 0.724, 0.695, 0.534, 0.554],
    'Following Loss of Susceptible Elm': [0.638, 0.613, 0.643, 0.345, 0.430],
    'Following Loss of All Elm': [0.637, 0.612, 0.642, 0.336, 0.382]
}

basal_area_df = pd.DataFrame(basal_area)

# Updating the x-axis categories for the plot
x_labels = ['Post-Ash Loss', 'Existing', 'Post-DED-Susceptible \nElm Loss', 'Post-Elm Loss']
x_pos = np.arange(len(x_labels))

# Extracting Gini coefficient data for each city and stage
gini_basal = basal_area_df.set_index('City').T
gini_tree_count = tree_count_df.set_index('City').T

# Plot for Basal Area Gini Coefficients
fig, ax = plt.subplots(figsize=(8, 6))

# Loop through each city to scatter its Gini coefficients
for city in cities:
    sizes = [125, 250, 125, 125]  # 150 for "Existing" (index 1)
    ax.scatter(x_pos, gini_basal[city], label=city, s=sizes)

# Set labels, title, and ticks
ax.set_xticks(x_pos)
ax.set_xticklabels(x_labels)
ax.set_ylabel('Gini Indices')

# Adjust legend position to be outside the plot
ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', labelspacing =2.0)

# Display the plot
plt.tight_layout()
plt.show()

# Save the plot as a high-resolution image
fig.savefig('Figure 3.png', dpi=900)

# Plot for Tree Count Gini Coefficients
fig, ax = plt.subplots(figsize=(8, 6))

# Loop through each city to scatter its Gini coefficients
for city in cities:
    sizes = [125, 250, 125, 125]  # 150 for "Existing" (index 1)
    ax.scatter(x_pos, gini_tree_count[city], label=city, s=sizes)

# Set labels, title, and ticks
ax.set_xticks(x_pos)
ax.set_xticklabels(x_labels)
ax.set_ylabel('Gini Indices')

# Adjust legend position to be outside the plot
ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', labelspacing =2.0)

# Display the plot
plt.tight_layout()
plt.show()

# Save the plot as a high-resolution image
fig.savefig('Figure 2.png', dpi=900)
