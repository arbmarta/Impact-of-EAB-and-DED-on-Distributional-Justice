import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

inventory_df = pd.read_csv(r'C:\Users\alexj\Documents\MSc Research\MSc Manuscripts\Drivers of Inequality\Python Scripts and Datasets\(1) Filtered Master Dataset.csv', low_memory=False)

## ---------------------------------------------------- FUNCTIONS ----------------------------------------------------
def calculate_gini_index(P, E):
    P = np.array(P) # Ensure P and E are numpy arrays for element-wise operations
    E = np.array(E)
    G_sum = np.sum((P[1:] - P[:-1]) * (E[1:] + E[:-1])) # Calculate the sum part of the Gini formula
    G = 1 - G_sum # Calculate final Gini index value
    return max(0, min(G, 1)) # Ensure G is within the bounds [0, 1]

# Define a function to remove the top percentile of Land Area for a given city DataFrame
percentile = 0.98

def filter_land_area_percentile(city_df):
    threshold = city_df['Land Area (km)'].quantile(percentile)  # Calculate the percentile threshold
    return city_df[city_df['Land Area (km)'] <= threshold]  # Filter out rows above the percentile

## ------------------------------------------------ DATA PREPARATION ------------------------------------------------
# Indices
variable_columns = ['Tree Count', 'Basal Area Sum', 'DED Sus Tree Count', 'DED Sus Basal Area',
                   'DED Tree Count', 'DED Basal Area', 'EAB Tree Count', 'EAB Basal Area']
tree_count_columns = ['Tree Count', 'DED Sus Tree Count', 'DED Tree Count', 'EAB Tree Count']
basal_area_columns = ['Basal Area Sum', 'DED Sus Basal Area', 'DED Basal Area', 'EAB Basal Area']
cities = ["Calgary", "Edmonton", "Lethbridge", "Regina", "Winnipeg"]

# Aggregate information
tree_count = inventory_df['CTUID'].value_counts()
basal_area = inventory_df.groupby('CTUID')['Basal Area'].sum()

DED_Sus_tree_count = inventory_df[inventory_df['DED Susceptible'] == 0]['CTUID'].value_counts()
DED_Sus_basal_area = inventory_df[inventory_df['DED Susceptible'] == 0].groupby('CTUID')['Basal Area'].sum()

DED_tree_count = inventory_df[inventory_df['All Elm - Susceptible'] == 0]['CTUID'].value_counts()
DED_basal_area = inventory_df[inventory_df['All Elm - Susceptible'] == 0].groupby('CTUID')['Basal Area'].sum()

EAB_tree_count = inventory_df[inventory_df['EAB Susceptible'] == 0]['CTUID'].value_counts()
EAB_basal_area = inventory_df[inventory_df['EAB Susceptible'] == 0].groupby('CTUID')['Basal Area'].sum()

# Aggregate the two series
aggregate_df = pd.DataFrame({
    'Tree Count': tree_count,
    'Basal Area Sum': basal_area,
    'DED Sus Tree Count': DED_Sus_tree_count,
    'DED Sus Basal Area': DED_Sus_basal_area,
    'DED Tree Count': DED_tree_count,
    'DED Basal Area': DED_basal_area,
    'EAB Tree Count': EAB_tree_count,
    'EAB Basal Area': EAB_basal_area
}).fillna(0)

aggregate_df = aggregate_df.reset_index()

# Remove extra columns
aggregate_df = aggregate_df[['CTUID', 'Tree Count', 'Basal Area Sum', 'DED Sus Tree Count','DED Sus Basal Area',
                      'DED Tree Count', 'DED Basal Area', 'EAB Tree Count','EAB Basal Area']]

# Population counts
CTUID_df = pd.read_excel(r'C:\Users\alexj\Documents\MSc Research\MSc Manuscripts\Drivers of Inequality\Census Statistics\Census Tracts.xlsx')

final_df = CTUID_df.merge(aggregate_df, how='outer', on='CTUID')
final_df = final_df[final_df['Population'] > 0]

total_population = final_df['Population'].sum()
print(f"The total population across all Census Tracts is: {total_population}")

population_by_city = final_df.groupby('City')['Population'].sum()
print(population_by_city)

print(len(final_df))
print(final_df.columns)
print(final_df)
final_df.to_csv("Gini Index Working Document.csv", index=False)

## ------------------------------------------- CREATE EXPANDED DATAFRAME -------------------------------------------
# Filter out rows where Land Area exceeds the percentile threshold
threshold = final_df['Land Area (km)'].quantile(percentile)
filtered_df = final_df[final_df['Land Area (km)'] <= threshold]

# Print for verification
print("Filtered DataFrame after removing rows above percentile of Land Area:")
print(filtered_df)

# Expanding the DataFrame
expanded_df = filtered_df.loc[filtered_df.index.repeat(filtered_df['Population'])].reset_index(drop=True)
expanded_df['Person Number'] = expanded_df.groupby('CTUID').cumcount() + 1
expanded_df = expanded_df[['CTUID', 'City', 'Population', 'Person Number']]

print(expanded_df)
print(expanded_df.columns)

# Merge with tree columns
tree_columns_df = pd.read_csv('Gini Index Working Document (DO NOT DELETE).csv', low_memory=False)
df = expanded_df.merge(tree_columns_df, on='CTUID', how='left')
df = df.rename(columns={'City_x': 'City', 'Population_x': 'Population'})

print(df)
print(df.columns)
print(len(df))

## ------------------------------------------- CREATE PROPORTIONATE COLUMNAFRAME -------------------------------------------
# Create proportionate column
tree_variables = ['Tree Count Per Capita', 'EAB Tree Count Per Capita', 'DED Sus Tree Count Per Capita',
                  'DED Tree Count Per Capita', 'Basal Area Sum Per Capita', 'EAB Basal Area Per Capita',
                    'DED Sus Basal Area Per Capita', 'DED Basal Area Per Capita']

tree_variable_proportions = ['Tree Count Proportion', 'EAB Tree Count Proportion', 'DED Sus Tree Count Proportion',
                                'DED Tree Count Proportion', 'Basal Area Sum Proportion', 'EAB Basal Area Proportion',
                                'DED Sus Basal Area Proportion', 'DED Basal Area Proportion']

# Calculate proportions for each tree variable
for variable in tree_variables:
    # Calculate the total for each city for the given variable
    city_totals = df.groupby('City')[variable].transform('sum')

    # Calculate the proportion for each entry
    proportion_column = variable.replace('Per Capita', 'Proportion')
    df[proportion_column] = df[variable] / city_totals

# Display the updated DataFrame
print("DataFrame with Tree Variable Proportions:")
print(df.columns)

# Calculate the total sum of each tree variable proportion for each city
city_proportion_sums = df.groupby('City')[tree_variable_proportions].sum().reset_index()

# Display the resulting DataFrame with summed proportions for each city
pd.set_option('display.max_columns', None)
print("Sum of Tree Variable Proportions for Each City:")
print(city_proportion_sums)
pd.reset_option('display.max_columns')

## ----------------------------------------- CREATE BOXPLOTS OF CT LAND AREA -----------------------------------------
plt.figure(figsize=(10, 6))
final_df.boxplot(column='Land Area (km)', by='City')
plt.title('')
plt.suptitle('')
plt.ylabel('Land Area (sq. km)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

city_population = {
    "Calgary": 1306784,
    "Edmonton": 1010899,
    "Lethbridge": 98406,
    "Regina": 226404,
    "Winnipeg": 749607
}

# Filter the DataFrame and recalculate population by city
filtered_df = final_df.groupby('City').apply(filter_land_area_percentile).reset_index(drop=True)
population_by_city = filtered_df.groupby('City')['Population'].sum()

# Print the adjusted population totals
print("Adjusted population by city after removing top percentile of Land Area:")
print(population_by_city)

# Update the city_population dictionary with the new totals
city_population = population_by_city.to_dict()

plt.figure(figsize=(10, 6))
filtered_df.boxplot(column='Land Area (km)', by='City')
plt.title('Filtered Land Area Distribution by City (Top Percentiles Removed)')
plt.suptitle('')
plt.ylabel('Land Area (sq. km)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

## --------------------------------- LOOP THROUGH CITY AND VARIABLE, SORT BY VARIABLE ---------------------------------
# List of cities
cities = ["Calgary", "Edmonton", "Lethbridge", "Regina", "Winnipeg"]

# Assuming final_df contains your data
sorted_results = {}  # Dictionary to store sorted DataFrames for each city and tree variable
gini_results = {}

# Loop through each city and tree variable
for city in cities:
    # Filter the DataFrame for the current city
    city_df = df[df['City'] == city]

    # Get the total population for the current city
    total_city_population = city_population[city]

    for tree_variable_prop in tree_variable_proportions:
        # Sort city_df by the current tree_variable in ascending order
        sorted_city_df = city_df.sort_values(by=tree_variable_prop, ascending=True).reset_index(drop=True)

        # Calculate the cumulative proportion column with a cap at 1
        cumulative_column = f"{tree_variable_prop} Cumulative Proportion"
        sorted_city_df[cumulative_column] = np.minimum(sorted_city_df[tree_variable_prop].cumsum(), 1)

        # Calculate the population proportion based on city population
        sorted_city_df['Population Proportion'] = 1 / total_city_population

        # Calculate the cumulative population proportion
        sorted_city_df['Cumulative Population Proportion'] = sorted_city_df['Population Proportion'].cumsum()

        # Store the sorted and updated DataFrame
        sorted_results[(city, tree_variable_prop)] = sorted_city_df

        # Display the updated DataFrame with cumulative columns for verification
        print(f"Sorted data for {city} by {tree_variable_prop} with cumulative proportions:")
        print(sorted_city_df[[cumulative_column, tree_variable_prop, 'Population Proportion', 'Cumulative Population Proportion']])  # Display for verification

        # Calculate the Gini Coefficient
        P = sorted_city_df['Cumulative Population Proportion'].values
        E = sorted_city_df[cumulative_column].values
        gini_index = round(calculate_gini_index(P, E), 3)

        # Store the Gini index in the dictionary
        gini_results[(city, tree_variable_prop)] = gini_index

        # Print the Gini index for verification
        print(f"Gini Index for {city} and {tree_variable_prop}: {gini_index}")
